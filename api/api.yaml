openapi: "3.0.0"
info:
  version: 1.0.0
  title: Serverless Stable Diffusion Inference
  description: This is the serverless stable diffusion inference API.
paths:
  /models:
    post:
      summary: register model
      operationId: registerModel
      requestBody:
        description: model details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelAttributes"
      responses:
        "200":
          description: register model response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: list model
      operationId: listModels
      responses:
        "200":
          description: list model all
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ModelAttributes"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /models/{model_name}:
    put:
      summary: update model
      description: update model
      operationId: updateModel
      parameters:
        - name: model_name
          in: path
          description: name of model
          required: true
          schema:
            type: string
            example: "example_model_name"
      requestBody:
        description: model detail
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModelAttributes"
      responses:
        "200":
          description: update model success
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: delete model
      operationId: deleteModel
      parameters:
        - name: model_name
          in: path
          description: name of model
          required: true
          schema:
            type: string
            example: "example_model_name_to_delete"
      responses:
        "200":
          description: delete model success
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: get model info
      operationId: getModel
      parameters:
        - name: model_name
          in: path
          description: name of model
          required: true
          schema:
            type: string
            example: "example_model_name_for_info"
      responses:
        "200":
          description: get model success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelAttributes"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /txt2img:
    post:
      summary: txt to img predict
      operationId: txt2Img
      requestBody:
        description: predict params
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Txt2ImgRequest"
      responses:
        "200":
          description: submit predict success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmitTaskResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /img2img:
    post:
      summary: img to img predict
      operationId: img2Img
      requestBody:
        description: predict params
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Img2ImgRequest"
      responses:
        "200":
          description: submit predict success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubmitTaskResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tasks/{taskId}/progress:
    get:
      summary: get predict progress
      operationId: getTaskProgress
      parameters:
        - name: taskId
          in: path
          description: task id
          required: true
          schema:
            type: string
            example: "example_task_id_for_progress"
      responses:
        "200":
          description: get predict progress success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskProgressResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tasks/{taskId}/cancellation:
    post:
      summary: cancel predict task
      operationId: cancelTask
      parameters:
        - name: taskId
          in: path
          description: task id
          required: true
          schema:
            type: string
            example: "example_task_id_to_cancel"
      responses:
        "200":
          description: cancel predict progress success
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tasks/{taskId}/result:
    get:
      summary: get predict result
      operationId: getTaskResult
      parameters:
        - name: taskId
          in: path
          description: task id
          required: true
          schema:
            type: string
            example: "example_task_id_for_result"
      responses:
        "200":
          description: get predict result success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResultResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /options:
    post:
      summary: update config options
      operationId: updateOptions
      requestBody:
        description: config option
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OptionRequest'
      responses:
        '200':
          description: update config options success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    post:
      summary: user login
      operationId: login
      requestBody:
        description: login body, include username, password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        '200':
          description: login response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /extra_images:
    post:
      summary: image upcaling
      operationId: extraImages
      requestBody:
        description: image upcaling
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtraImagesRequest'
      responses:
        '200':
          description: image upcaling respone
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitTaskResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /restart:
    post:
      summary: restart webui api server
      operationId: restart
      responses:
        "200":
          description: restart success
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /del/sd/functions:
    post:
      summary: delete sd function
      operationId: DelSDFunc
      requestBody:
        description: functions list
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelSDFunctionRequest'
      responses:
        "200":
          description: del success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DelSDFunctionResponse"
        "500":
          description: update function partial failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DelSDFunctionResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /batch_update_sd_resource:
    post:
      summary: update sd function resource by batch, Supports a specified list of functions, or all
      operationId: BatchUpdateResource
      requestBody:
        description: update function resource
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchUpdateSdResourceRequest'
      responses:
        "200":
          description: update success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchUpdateSdResourceResponse"
        "500":
          description: update function partial failure
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchUpdateSdResourceResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /list/sdapi/functions:
    get:
      summary: list sdapi function
      operationId: listSdFunc
      responses:
        "200":
          description: sd list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListSDFunctionResponse"
        "500":
          description: sd list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListSDFunctionResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /register/sdapi/function:
    post:
      summary: register sdapi function
      operationId: registerFunction
      requestBody:
        description: function info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelFunctionRequest'
      responses:
        "200":
          description: register result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelFunctionResponse"
        "500":
          description: register result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelFunctionResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /update/sdapi/function:
    post:
      summary: update sdapi function
      operationId: updateFunction
      requestBody:
        description: function info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelFunctionRequest'
      responses:
        "200":
          description: register result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelFunctionResponse"
        "500":
          description: register result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelFunctionResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /delete/sdapi/function:
    post:
      summary: delete sdapi function
      operationId: delFunction
      requestBody:
        description: function info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelFunctionRequest'
      responses:
        "200":
          description: register result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelFunctionResponse"
        "500":
          description: register result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ModelFunctionResponse"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Model:
      required:
        - type
        - name
        - ossPath
      properties:
        type:
          type: string
          description: model type
          example: "diffusion"
        name:
          type: string
          description: model name
          example: "model_v1"
        ossPath:
          type: string
          description: the oss path of the model
          example: "/path/to/oss/model_v1"
    ModelAttributes:
      allOf:
        - $ref: "#/components/schemas/Model"
        - required:
            - etag
            - status
          properties:
            etag:
              type: string
              description: the oss etag of the model
              example: "3f786850e387550fdab836ed7e6dc881de23001b"
            status:
              type: string
              description: the model status, registering, loading, loaded or unloaded
              example: "loaded"
            registeredTime:
              type: string
              description: the registered time of the model
              example: "2023-01-01T12:00:00Z"
            lastModificationTime:
              type: string
              description: the last modification time of the model
              example: "2023-01-10T12:00:00Z"
    Txt2ImgRequest:
      required:
        - stable_diffusion_model
      properties:
        stable_diffusion_model:
          type: string
          minLength: 1
          example: "diffusion_v1"
        sd_vae:
          type: string
          example: "vae_v1"
        save_dir:
          type: string
          example: "/path/to/save_dir"
        enable_hr:
          type: boolean
          example: true
        denoising_strength:
          type: number
          format: float
          example: 0.5
        firstphase_width:
          type: integer
          format: int32
          example: 640
        firstphase_height:
          type: integer
          format: int32
          example: 480
        hr_scale:
          type: integer
          format: int32
          example: 2
        hr_upscaler:
          type: string
          example: "upscale_method_v1"
        hr_second_pass_steps:
          type: integer
          format: int32
          example: 10
        hr_resize_x:
          type: integer
          format: int32
          example: 1280
        hr_resize_y:
          type: integer
          format: int32
          example: 960
        hr_sampler_name:
          type: string
          example: "sampler_v1"
        hr_prompt:
          type: string
          example: "High resolution prompt"
        hr_negative_prompt:
          type: string
          example: "Negative high resolution prompt"
        prompt:
          type: string
          example: "Mountain landscape during sunset"
        styles:
          type: array
          items:
            type: string
          example: ["style1", "style2"]
        seed:
          type: integer
          format: int32
          example: 123456
        subseed:
          type: integer
          format: int32
          example: 789
        subseed_strength:
          type: integer
          format: int32
          example: 5
        seed_resize_from_h:
          type: integer
          format: int32
          example: 480
        seed_resize_from_w:
          type: integer
          format: int32
          example: 640
        sampler_name:
          type: string
          example: "sampler_v2"
        batch_size:
          type: integer
          format: int32
          example: 32
        n_iter:
          type: integer
          format: int32
          example: 1000
        steps:
          type: integer
          format: int32
          example: 100
        cfg_scale:
          type: integer
          format: int32
          example: 1
        width:
          type: integer
          format: int32
          example: 640
        height:
          type: integer
          format: int32
          example: 480
        restore_faces:
          type: boolean
          example: true
        tiling:
          type: boolean
          example: false
        do_not_save_samples:
          type: boolean
          example: false
        do_not_save_grid:
          type: boolean
          example: false
        negative_prompt:
          type: string
          example: "Avoid mountains"
        eta:
          type: integer
          format: int32
          example: 5
        s_min_uncond:
          type: integer
          format: int32
          example: 1
        s_churn:
          type: integer
          format: int32
          example: 3
        s_tmax:
          type: integer
          format: int32
          example: 10
        s_tmin:
          type: integer
          format: int32
          example: 1
        s_noise:
          type: integer
          format: int32
          example: 2
        override_settings:
          type: object
          example: { "settingKey": "settingValue" }
        override_settings_restore_afterwards:
          type: boolean
          example: true
        script_args:
          type: array
          example: [{ "argKey": "argValue" }]
        sampler_index:
          type: string
          example: "index_v1"
        script_name:
          type: string
          example: "script_v1"
        send_images:
          type: boolean
          example: true
        save_images:
          type: boolean
          example: true
        alwayson_scripts:
          type: object
          example: { "scriptKey": "scriptValue" }
    Img2ImgRequest:
      required:
        - stable_diffusion_model
      properties:
        stable_diffusion_model:
          type: string
          minLength: 1
          example: "diffusion_v2"
        sd_vae:
          type: string
          example: "vae_v2"
        save_dir:
          type: string
          example: "/path/to/save_dir_v2"
        init_images:
          type: array
          items:
            type: string
          example: ["image1_path", "image2_path"]
        resize_mode:
          type: integer
          format: int32
          example: 1
        denoising_strength:
          type: number
          format: float
          example: 0.8
        image_cfg_scale:
          type: integer
          format: int32
          example: 2
        mask:
          type: string
          example: "mask_path"
        mask_blur:
          type: integer
          format: int32
          example: 3
        mask_blur_x:
          type: integer
          format: int32
          example: 2
        mask_blur_y:
          type: integer
          format: int32
          example: 2
        inpainting_fill:
          type: integer
          format: int32
          example: 4
        inpaint_full_res:
          type: boolean
          example: true
        inpaint_full_res_padding:
          type: integer
          format: int32
          example: 2
        inpainting_mask_invert:
          type: integer
          format: int32
          example: 0
        initial_noise_multiplier:
          type: integer
          format: int32
          example: 5
        prompt:
          type: string
          example: "Forest landscape"
        styles:
          type: array
          items:
            type: string
          example: ["styleA", "styleB"]
        seed:
          type: integer
          format: int32
          example: 654321
        subseed:
          type: integer
          format: int32
          example: 987
        subseed_strength:
          type: integer
          format: int32
          example: 6
        seed_resize_from_h:
          type: integer
          format: int32
          example: 480
        seed_resize_from_w:
          type: integer
          format: int32
          example: 640
        sampler_name:
          type: string
          example: "sampler_v3"
        batch_size:
          type: integer
          format: int32
          example: 64
        n_iter:
          type: integer
          format: int32
          example: 500
        steps:
          type: integer
          format: int32
          example: 50
        cfg_scale:
          type: integer
          format: int32
          example: 2
        width:
          type: integer
          format: int32
          example: 1280
        height:
          type: integer
          format: int32
          example: 960
        restore_faces:
          type: boolean
          example: false
        tiling:
          type: boolean
          example: true
        do_not_save_samples:
          type: boolean
          example: false
        do_not_save_grid:
          type: boolean
          example: true
        negative_prompt:
          type: string
          example: "Avoid forests"
        eta:
          type: integer
          format: int32
          example: 6
        s_min_uncond:
          type: integer
          format: int32
          example: 2
        s_churn:
          type: integer
          format: int32
          example: 4
        s_tmax:
          type: integer
          format: int32
          example: 11
        s_tmin:
          type: integer
          format: int32
          example: 2
        s_noise:
          type: integer
          format: int32
          example: 3
        override_settings:
          type: object
          example: { "settingKeyV2": "settingValueV2" }
        override_settings_restore_afterwards:
          type: boolean
          example: false
        script_args:
          type: array
          example: ["arg1", "arg2"]
        sampler_index:
          type: string
          example: "index_v2"
        include_init_images:
          type: boolean
          example: false
        script_name:
          type: string
          example: "script_v2"
        send_images:
          type: boolean
          example: false
        save_images:
          type: boolean
          example: true
        alwayson_scripts:
          type: object
          example: { "scriptKeyV2": "scriptValueV2" }

    SubmitTaskResponse:
      required:
        - taskId
        - status
      properties:
        taskId:
          type: string
          example: "task123456"
        status:
          type: string
          example: "submitted"
        ossUrl:
          type: array
          items:
            type: string
          description: "oss url"
        message:
          type: string
          example: "Task has been successfully submitted."

    TaskProgressResponse:
      required:
        - taskId
        - progress
        - etaRelative
        - currentImage
      properties:
        taskId:
          type: string
          example: "task123456"
        progress:
          type: number
          format: float
          example: 0.75
        etaRelative:
          type: number
          format: float
          example: 0.25
        state:
          type: object
          example: { "phase": "processing" }
        currentImage:
          type: string
          example: "/path/to/current/image.jpg"
        message:
          type: string
          example: "Processing image..."

    TaskResultResponse:
      description: one task result, include taskId/images/parameters/info
      required:
        - taskId
        - status
      properties:
        taskId:
          type: string
          example: "task123456"
        status:
          type: string
          example: "waiting|running|succeeded|failed"
        images:
          description: one task image result, len(images)>1 when batch count or batch size > 1
          type: array
          items:
            type: string
          example: ["/path/to/image1.jpg", "/path/to/image2.jpg"]
        ossUrl:
          type: array
          items:
            type: string
          description: "oss url"
        parameters:
          description: task predict params
          type: object
          example: { "paramKey": "paramValue" }
        info:
          description: task predict info
          type: object
          example: { "infoKey": "infoValue" }
        message:
          type: string
          example: "Task completed successfully."
    OptionRequest:
      description: config params
      required:
        - data
      properties:
        data:
          type: object
          example: "{}"
    ResponseMessage:
      description: response message
      required:
        - message
      properties:
        message:
          type: string
          example: "success"
    UserLoginRequest:
      description: user login request, include username and password
      required:
        - userName
        - password
      properties:
        userName:
          type: string
          example: "admin"
        password:
          type: string
          example: "123456sdfghj"
    UserLoginResponse:
      description: user login response
      required:
        - token
        - userName
      properties:
        token:
          type: string
          example: "qwerthdkflglglglhjdhjdhd"
        userName:
          type: string
          example: "admin"
        message:
          type: string
          example: "success"
    ExtraImagesRequest:
      required:
        - resize_mode
        - image
      properties:
        stable_diffusion_model:
          type: string
          example: "sd checkpoint"
        resize_mode:
          type: integer
          format: int32
          example: "0|1"
        show_extras_results:
          type: boolean
          example: "false|true"
        gfpgan_visibility:
          type: number
          format: float
          example: "0.01"
        codeformer_visibility:
          type: number
          format: float
          example: "0.01"
        codeformer_weight:
          type: number
          format: float
          example: "0.01"
        upscaling_resize:
          type: number
          format: float
          example: "2.0"
        upscaling_resize_w:
          type: integer
          format: int32
          example: "1024"
        upscaling_resize_h:
          type: integer
          format: int32
          example: "1024"
        upscaling_crop:
          type: boolean
          example: "true|false"
        upscaler_1:
          type: string
          example: "ScuNET PSNR"
        upscaler_2:
          type: string
          example: "ScuNET PSNR"
        extras_upscaler_2_visibility:
          type: number
          format: float
          example: "0.02"
        upscale_first:
          type: boolean
          example: "true|false"
        image:
          type: string
          example: "base64|imgpath"
    BatchUpdateSdResourceRequest:
      properties:
        models:
          type: array
          items:
            type: string
          description: sd models list, not set default all
        cpu:
          type: number
          format: float
          description: sd function cpu
        memorySize:
          type: integer
          format: int32
          description:  instance mem size (MB)
        timeout:
          type: integer
          format: int32
          description: fucntion timeout
        extraArgs:
          type: string
          description: sd start args
          example: "--api"
        vpcConfig:
          type: object
          description: "vpc config"
        nasConfig:
          type: object
          description: "nas config"
        ossMountConfig:
          type: object
          description: "oss config"
        env:
          type: object
          description: "sd env"
    BatchUpdateSdResourceResponse:
      properties:
        status:
          type: string
          description: update status val(success\fail)
          example: "success"
        failFuncList:
          type: array
          items:
            type: string
          description: fail function list
        errMsg:
          type: string
          description: fail message
    ListSDFunctionResponse:
      properties:
        status:
          type: string
          description: success|fail
          example: "success"
        functions:
          type: array
          items:
            type: object
          description: dynamically creating functions
        errMsg:
          type: string
          description: fail message
    DelSDFunctionRequest:
      properties:
        functions:
          type: array
          items:
            type: string
          description: del functions
    DelSDFunctionResponse:
      properties:
        status:
          type: string
          description: success|fail
          example: "success"
        fails:
          type: array
          items:
            type: object
          description: fail delete functions
    ModelFunctionRequest:
      properties:
        model:
          type: string
          description: model name
        functionName:
          type: string
          description: model in FC functionName
        endpoint:
          type: string
          description: FC function endpoint
    ModelFunctionResponse:
      properties:
        status:
          type: string
          description: success|fail
        message:
          type: string
          description: result error msg
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Error code
          example: 400
        message:
          type: string
          description: Error message
          example: "Bad Request"
